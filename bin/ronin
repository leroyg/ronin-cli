#!/usr/bin/env ruby

require 'getopt/long'

$LOAD_PATH.unshift(File.expand_path(File.join(File.dirname(__FILE__),'..','lib')))
require 'repo/cache'
include Ronin

opt = Getopt::Long.getopts(
  ['--cache','-C',Getopt::REQUIRED],
  ['--repo-path','-P',Getopt::REQUIRED],
  ['--category','-c',Getopt::REQUIRED],
  ['--action','-a',Getopt::REQUIRED],
  ['--actions','-A',Getopt::OPTIONAL],
  ['--verbose','-v'],
  ['--version','-V'],
  ['--help','-h',Getopt::OPTIONAL]
)

if opt['version']
  puts "ronin v#{RONIN_VERSION}"
  exit
end

if opt['cache']
  Repo::load_cache(opt['cache'])
end

ronin_command = ARGV.shift
ronin_args = ARGV

case ronin_command

# Install a repository
when 'install' then
  Repo::RepositoryMetadata.new(ronin_args[0]) do |metadata| 
    if opt['repo-path']
      Repo::cache.install(metadata,opt['repo-path'])
    else
      Repo::cache.install(metadata)
    end
  end

# Add a repository
when 'add' then
  Repo::cache.link(ronin_args[0])

# List all repositories or a specific one
when 'list','ls' then
  if ronin_args[0]
    repo = Repo::cache.get_repository(ronin_args[0])

    puts "[ #{repo} ]"
    puts "\tname: #{repo.name}"
    puts "\tpath: #{repo.path}"
    puts "\ttype: #{repo.type}"

    if opt['verbose']
      repo.author.each_value do |author|
	puts "\n\tauthor: #{author.name}\n"

	author.contacts.each do |key,value|
	  puts "\t\t#{key}: #{value}"
	end

	if author.biography
	  puts "\t\tbiography:\n\n\t\t\t#{author.biography}"
	end

	putc "\n"
      end

      if repo.description
	puts "\tdescription:\n\n\t\t#{repo.description}"
      end
    end

    unless repo.deps.empty?
      puts "\n\tdependencies:\n\n"

      repo.deps.each_key do |dep|
	print "\t\t#{dep}"

	unless Repo::cache.has_repository?(dep)
	  print " (missing)"
	end
	putc "\n"
      end

      putc "\n"
    end

    if (opt['verbose'] && !(repo.categories.empty?))
      puts "\tcategories:\n\n"
      repo.categories.each { |category| puts "\t\t#{category}" }
    end
  else
    Repo::cache.repositories.each { |repo| puts "#{repo}" }
  end

# Update all repositories or a specific one
when 'update','up' then
  if ronin_args[0]
    Repo::cache.get_repository(ronin_args[0]).update
  else
    Repo::cache.update
  end

else
  # Load the category
  category = Repo::cache.get_category(ronin_command)

  if opt['actions']
    # List actions of the category
    category.actions.each_value { |action| puts "#{action}" }
  else
    # Perform actions of the category
    category.setup

    if opt['action']
      if (opt['action']!='setup' && opt['action']!='teardown')
	category.perform_action(opt['action'])
      end
    else
      category.main
    end

    category.teardown
  end
end
